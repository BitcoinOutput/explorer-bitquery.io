<% chain = BLOCKCHAINS.detect{|chain| chain[:network] == @network} if @network && !@network.empty? %>
<%= render partial: 'shared/title',
           locals: {header: (chain ? t('headers.search_in',network: chain[:name], query: @query) : t('headers.search', query: @query))} %>
<script>
    var query = new widgets.query(`
    query(<%= "$network: Network!, " if @network %>$query: String!){
      search(<%= "network: $network, " if @network %>string: $query){
          subject{
            __typename
            ... on Address {
              address
              annotation
            }
            ... on Currency {
              symbol
              name
              address
              tokenId

            }
            ... on SmartContract {
              address
              annotation
              contractType
              protocol
            }
          }
          network{
            network
            protocol
          }
        }
      }
    `, {
        types: [
            {
                kind: 'UNION',
                name: 'SearchResultItem',
                possibleTypes: [
                    { name: 'Address' },
                    { name: 'Currency' },
                    { name: 'SmartContract' }
                ],
            },
        ],
    });
</script>
<div class="row">
  <div class="col mb-4">
    <div id="search"><%= t('loading') %></div>
  </div>
</div>
<script>
    var sch = new widgets.list('#search', query, 'search', {
        excludeButtons: ['csv', 'js'],
        renderData: function(data){
            if(Array.isArray(data) && data.length == 1){
                let item = data[0];
                let item_type = (item.subject.contractType ? 'smart_contract' : (item.subject.symbol ? 'token' : 'address'));
                window.location.replace('<%= locale_path_prefix %>'+item.network.network+'/'+item_type+'/'+
                    (item.subject.address || item.subject.tokenId || item.subject.symbol ));
            }
          return data;
        },
        title: 'Search',
        dataOptions:{
            type: 'string',
            renderCallback: function(item){
                let item_type = (item.subject.contractType ? 'smart_contract' : (item.subject.symbol ? 'token' : 'address'));
                var item_name, item_icon = '';
                switch (item_type) {
                  case 'address':
                      item_name="<%= t('address') %> "+( item.subject.annotation || item.subject.address );
                      item_icon = '<span class="fas fa-user"></span>';
                      break;
                  case 'smart_contract':
                      item_name="<%= t('smart_contract') %> "+( item.subject.annotation || item.subject.address );
                      item_icon = '<span class="fas fa-cogs text-info"></span>';
                      break;
                  case 'token':
                      item_name="<%= t('token') %> "+ item.subject.symbol + ', '+item.subject.name + ' '+ (item.subject.annotation || '') ;
                      item_icon = '<span class="fas fa-coins text-warning"></span>';
                      break;
                };

                let chains = {<%= BLOCKCHAINS.collect{|chain| "#{chain[:network]}: {name: \"#{chain[:name]}\", icon: \"#{image_pack_path "media/icon/#{chain[:icon]}"}\"}".html_safe}.join(",\n").html_safe %>};
                let url = '/'+item.network.network+'/'+item_type+'/'+(item.subject.address || item.subject.tokenId || item.subject.symbol );

                let html = "<div class='media'>\n" +
                    "  <img src='"+chains[item.network.network].icon+"' class='mr-3' alt='"+chains[item.network.network].name+"'>\n" +
                    "  <div class='media-body word-wrap' style='min-width: 40%;'>\n" +
                    "    <h6 class='mt-0'>"+item_icon+" <a href='"+url+"'>"+chains[item.network.network].name +
                    ' <strong class="text-success">' + item_name + ' '+ '</strong>'+
                    "</a></h6>\n" +
                    "    <a href='"+url+"'>"+url+"</a>" +
                    "  </div>\n" +
                    "</div>";
                return html;
            }
        }
    });
    query.request({<%= "network: '#{@network[:network]}', ".html_safe if @network %>query: '<%= @query %>'});
</script>