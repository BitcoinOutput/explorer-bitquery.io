<%= render partial: 'ethereum/address/description' %>
<script>
    var query1 = new widgets.query(`
      query($network: EthereumNetwork!, $currency: String!, $address: String!, $from: ISO8601DateTime, $till: ISO8601DateTime){
      ethereum(network: $network) {
        transfers(date: {since: $from, till: $till}){
            sum_in: amount(calculate: sum,
                        currency: {is: $currency},
                        receiver: {is: $address}
            )
            sum_out: amount(calculate: sum,
              currency: {is: $currency},
              sender: {is: $address}
            )
            count_in: count( uniq: transfers,
                receiver: {is: $address}
            )
            count_out: count( uniq: transfers,
                sender: {is: $address}
            )
            date{
              month: date(format: "%Y-%m")
            }
          }
      }
      }
    `);

    var query2 = new widgets.query(`
    query($network: EthereumNetwork!, $address: String!, $from: ISO8601DateTime, $till: ISO8601DateTime){
      ethereum(network: $network) {
        smartContractCalls(date: {since: $from, till: $till}){
              count(
                uniq: calls,
                caller: {is: $address}
              )
              date {
                month: date(format: "%Y-%m")
              }
            }

      }
    }
    `);
    var query3 = new widgets.query(`
    query($network: EthereumNetwork!, $address: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $limit: Int!, $offset: Int!){
      ethereum(network: $network) {
        transfers(date: {since: $from, till: $till}, options: {limit: $limit, offset: $offset}){
            sum_in: amount(calculate: sum,
              receiver: {is: $address}
            )
            sum_out: amount(calculate: sum,
              sender: {is: $address}
            )
            count_in: count( uniq: transfers,
              receiver: {is: $address}
            )
            count_out: count( uniq: transfers,
              sender: {is: $address}
            )
            currency {
              address
              symbol
            }
          }
      }
    }
    `);

    var query4 = new widgets.query(`
    query($network: EthereumNetwork!, $address: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $limit: Int!, $offset: Int!){
      ethereum(network: $network) {
        smartContractCalls(date: {since: $from, till: $till}, options: {limit: $limit, offset: $offset}) {
          count(caller: {is: $address}, uniq:calls)
          smartContract{
            address{
              address
              annotation
            }
          }
          smartContractMethod {
            name
            signatureHash
          }
        }
      }
    }
    `);
</script>
<div class="row">
  <div class="col-12 col-lg-6 mb-4">
    <div class="card">
      <div class="card-header"><%= t('widgets.headers.transaction_by_time') %></div>
      <div class="card-body">
        <div id="transfers_timegraph"><%= t('loading') %></div>
      </div>
    </div>
  </div>
  <div class="col-12 col-lg-6 mb-4">
    <div class="card">
      <div class="card-header"><%= t('widgets.headers.calls_by_time') %></div>
      <div class="card-body">
        <div id="calls_timegraph"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>
<div class="row">
  <div class="col-12 col-lg-6 mb-4">
    <div class="card">
      <div class="card-header"><%= t('widgets.headers.currencies_sent_received') %></div>
      <div class="card-body">
        <div id="transfers_by_currencies"><%= t('loading') %></div>
      </div>
    </div>
  </div>
  <div class="col-12 col-lg-6 mb-4">
    <div class="card">
      <div class="card-header"><%= t('widgets.headers.calls_smart_contracts') %></div>
      <div class="card-body">
        <div id="calls_smart_contracts"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>

<script>
    widgets.callbacks({
        token_path: function(item){
            return '<%= params[:locale] %>/<%= params['network']['path'] %>/address/'+item.currency.address;
        },
        transfer_to_path: function(item){
            return '<%= params[:locale] %>/<%= params['network']['path'] %>'+'/txs/transfers_to/'+item.currency.address;
        },
        transfer_from_path: function(item){
            return '<%= params[:locale] %>/<%= params['network']['path'] %>/txs/transfers_from/'+item.currency.address;
        },
        smart_contract_method_path: function(item){
            return '<%= params[:locale] %>/<%= params['network']['path'] %>'+'/functions/'+item.smartContract.address.address;
        },
        smart_contract_path: function(item){
            return '<%= params[:locale] %>/<%= params['network']['path'] %>'+'/smartcontract/'+item.smartContract.address.address;
        },
        call_count_path: function(item){
            return '<%= params[:locale] %>/<%= params['network']['path'] %>'+'/address/'+item.smartContract.address.address;
        }
    });

    var tt = new widgets.chart('#transfers_timegraph', query1, 'ethereum.transfers', {
        title: '<%= t('widgets.headers.transaction_by_time') %>',
        chartOptions: {
            isStacked: true,
            vAxes: {
                '0': {
                    title: '<%= t('widgets.titles.tx_count') %>',
                },
                '1': {
                    title: '<%= t('widgets.titles.volume', currency: params['network']['currency']) %>',
                }
            },
            hAxis: {
                title: '<%= t('widgets.titles.month') %>',
            },
            seriesType: 'bars',
            series: {
                '0': { color: 'orange' },
                '1': { color: 'lightgreen' },
                '2': { color: 'green', type: 'line', targetAxisIndex: 1, lineWidth: 3, pointsVisible: true, pointShape: 'diamond', pointSize: 12},
                '3': { color: 'red', type: 'line', targetAxisIndex: 1, lineWidth: 3, pointsVisible: true, pointShape: 'diamond', pointSize: 12}
            }
        },
        dataOptions: [
            {
                title: '<%= t('widgets.titles.date') %>',
                path: 'date.month'
            },
            {
                title: '<%= t('widgets.titles.receive_count') %>',
                path: 'count_in'
            },
            {
                title: '<%= t('widgets.titles.send_count') %>',
                path: 'count_out'
            },
            {
                title: '<%= t('widgets.titles.volume_in', currency: params['network']['currency']) %>',
                path: 'sum_in'
            },
            {
                title: '<%= t('widgets.titles.volume_out', currency: params['network']['currency']) %>',
                path: 'sum_out'
            },
        ]
    });

    var ct = new widgets.chart('#calls_timegraph', query2, 'ethereum.smartContractCalls', {
        title: '<%= t('widgets.headers.calls_by_time') %>',
        chartOptions: {
            vAxes: {
                '0': {
                    title: '<%= t('widgets.titles.smart_contract') %>'
                }
            },
            hAxis: {
                title: '<%= t('widgets.titles.month') %>'
            }
        },
        dataOptions: [
            {
                title: '<%= t('widgets.titles.date') %>',
                path: 'date.month'
            },
            {
                title: '<%= t('widgets.titles.calls_count') %>',
                path: 'count'
            }
        ]
    });

    var tbc = new widgets.table('#transfers_by_currencies', query3, 'ethereum.transfers', {
        title: '<%= t('widgets.headers.currencies_sent_received') %>',
        tableOptions: {
            title: [
                '<%= t('widgets.titles.currency') %>', '', '<%= t('widgets.titles.receive') %>', '<%= t('widgets.titles.txs') %>', '<%= t('widgets.titles.send') %>', '', '<%= t('widgets.titles.txs') %>'
            ],
            data: [
                {
                    type: 'string-ellipsis',
                    path: 'currency.symbol',
                    urlCallbackName: 'token_path'
                },
                {
                    type: 'string',
                    data: '<i class="fa fa-sign-in text-success"></i>',
                    html_class: 'text-center'
                },
                {
                    type: 'amount',
                    path: 'sum_in'
                },
                {
                    type: 'count',
                    path: 'count_in',
                    data: '%{DATA} <span class="fa fa-list"></span>',
                    urlCallbackName: 'transfer_to_path'
                },
                {
                    type: 'amount',
                    path: 'sum_out'
                },
                {
                    type: 'string',
                    path: '',
                    data: '<i class="fa fa-sign-out text-warning"></i>',
                },
                {
                    type: 'count',
                    path: 'count_out',
                    data: '%{DATA} <span class="fa fa-list"></span>',
                    urlCallbackName: 'transfer_from_path'
                },
            ]
        }
    });

    var cbc = new widgets.table('#calls_smart_contracts', query4, 'ethereum.smartContractCalls', {
        title: '<%= t('widgets.headers.calls_smart_contracts') %>',
        tableOptions: {
            title: [
                '<%= t('widgets.titles.smart_contract') %>', '<%= t('widgets.titles.method') %>', '<%= t('widgets.titles.tx_count') %>'
            ],
            data: [
                {
                    type: 'string-ellipsis',
                    path: ['smartContract.address.annotation', 'smartContract.address.address'],
                    urlCallbackName: 'smart_contract_path'
                },
                {
                    type: 'string-ellipsis',
                    path: 'smartContractMethod.name',
                    urlCallbackName: 'smart_contract_method_path'
                },
                {
                    type: 'count',
                    path: 'count',
                    data: '%{DATA} <span class="fa fa-list"></span>',
                    urlCallbackName: 'call_count_path'
                }
            ]
        }
    });

    query1.request({network: '<%= params['network']['network'] %>', currency: '<%= params['network']['currency'] %>', address: '<%= @address %>', from: <%= @from.html_safe %>, till: <%= @till.html_safe %>});
    query2.request({network: '<%= params['network']['network'] %>', address: '<%= @address %>', from: <%= @from.html_safe %>, till: <%= @till.html_safe %>});
    query3.request({network: '<%= params['network']['network'] %>', address: '<%= @address %>', from: <%= @from.html_safe %>, till: <%= @till.html_safe %>, limit: 10});
    query4.request({network: '<%= params['network']['network'] %>', address: '<%= @address %>', from: <%= @from.html_safe %>, till: <%= @till.html_safe %>, limit: 10});

    rr.change(function(start, end, clear){
        query1.request({from: start, till: end});
        query2.request({from: start, till: end});
        query3.request({from: start, till: end, limit: 10, offset: 0});
        query4.request({from: start, till: end, limit: 10, offset: 0});
    })
</script>