<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div class="card">
      <div class="card-header alert-warning"><%= t('widgets.headers.miners') %></div>
      <div class="card-body">
   <div class="alert alert-primary" role="alert">
  This is a primary alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div class="alert alert-secondary" role="alert">
  This is a secondary alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div class="alert alert-success" role="alert">
  This is a success alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div class="alert alert-danger" role="alert">
  This is a danger alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div class="alert alert-warning" role="alert">
  This is a warning alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div class="alert alert-info" role="alert">
  This is a info alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div id='testDiv' class="alert alert-light" role="alert">
  This is a light alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div class="alert alert-dark" role="alert">
  This is a dark alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
        <div id="miners"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>

<script>
const queryCurrent = `query MyQuery {
  EVM(dataset: realtime, network: bsc) {
    BalanceUpdates(
      orderBy: {descending: BalanceUpdate_Amount}
      limit: {count: 10}
      where: {Currency: {SmartContract: {is: "0x3ee2200efb3400fabb9aacf31297cbdd1d435d47"}}, Block: {Date: {after: "2023-02-01"}}}
    ) {
      BalanceUpdate {
        Address
        Amount
      }
      Currency {
        Name
      }
    }
  }
}`;
const table = {
    query:undefined,
  div:undefined,
variables: 'somthing'
}
const divForRender = document.querySelector('#testDiv');

function globalRender (queryCurrent,divForRender, table){
table.div = divForRender
table.query = queryCurrent
    async function queryToServer(query) {
      const myHeaders = new Headers();
      myHeaders.append("Content-Type", "application/json");
      myHeaders.append("X-API-KEY", "BQYmWD89rihDmpdTOAWDSUdtB82pZgiE");
      
      const raw = JSON.stringify({
      query: query,
      variables: "{}"
      });
      
      const requestOptions = {
      method: 'POST',
      headers: myHeaders,
      body: raw,
      redirect: 'follow'
      };
    
      try {
      const response = await fetch("https://streaming.bitquery.io/graphql", requestOptions);
      if (!response.ok) {
      throw new Error('Network response was not ok');
      }
      const result = await response.text();
      table.onDate()
      console.log('what is is', table.onDate());
      
      return result;
      } catch (error) {
      console.error('Error:', error);
      return undefined;
      }
    }
    
  async function render() {
  const div = document.createElement('div');
  div.innerHTML = await queryToServer(table.query);
  table.div.appendChild(div);
  }
  
  render();
console.log(table);
}


globalRender(queryCurrent,divForRender,table)
</script>