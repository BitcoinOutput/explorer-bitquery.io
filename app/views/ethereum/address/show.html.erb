<%= render partial: 'shared/title', locals: {header: t('headers.address', network: params['network']['name'], address: @address).html_safe, reportrange: true} %>
<script>
    var query1 = new widgets.query(`
      query($network: EthereumNetwork!, $currency: String!, $address: String!, $from: ISO8601DateTime, $till: ISO8601DateTime){
      ethereum(network: $network) {
        transfers(from: $from, till: $till){
            sum_in: amount(calculate: sum,
                        currency: {symbol: $currency},
                        receiver: {address: $address}
            )
            sum_out: amount(calculate: sum,
              currency: {symbol: $currency},
              sender: {address: $address}
            )
            count_in: count( uniq: transfers,
                receiver: {address: $address}
            )
            count_out: count( uniq: transfers,
                sender: {address: $address}
            )
            date{
              month: date(format: "%Y-%m")
            }
          }
      }
      }
    `);

    var query2 = new widgets.query(`
    query($network: EthereumNetwork!, $address: String!, $from: ISO8601DateTime, $till: ISO8601DateTime){
      ethereum(network: $network) {
        smartContractCalls(from: $from, till: $till){
              count(
                uniq: calls,
                caller: {address: $address}
              )
              date {
                month: date(format: "%Y-%m")
              }
            }

      }
    }
    `);
    var query3 = new widgets.query(`
    query($network: EthereumNetwork!, $address: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $limit: Int!, $offset: Int!){
      ethereum(network: $network) {
        transfers(from: $from, till: $till, options: {limit: $limit, offset: $offset}){
            sum_in: amount(calculate: sum,
              receiver: {address: $address}
            )
            sum_out: amount(calculate: sum,
              sender: {address: $address}
            )
            count_in: count( uniq: transfers,
              receiver: {address: $address}
            )
            count_out: count( uniq: transfers,
              sender: {address: $address}
            )
            currency {
              address
              symbol
            }
          }
      }
    }
    `);

    var query4 = new widgets.query(`
    query($network: EthereumNetwork!, $address: String!, $from: ISO8601DateTime, $till: ISO8601DateTime, $limit: Int!, $offset: Int!){
      ethereum(network: $network) {
        smartContractCalls(from: $from, till: $till, options: {limit: $limit, offset: $offset}) {
          count(caller: {address: $address}, uniq:calls)
          smartContract{
            address{
              address
              annotation
            }
          }
          smartContractMethod {
            name
            signatureHash
          }
        }
      }
    }
    `);
</script>
<div class="row">
  <div class="col-12 col-lg-6 mb-4">
    <div class="card">
      <div class="card-header"><%= t('widgets.headers.transaction_by_time') %></div>
      <div class="card-body">
        <div id="transfers_timegraph"><%= t('loading') %></div>
      </div>
    </div>
  </div>
  <div class="col-12 col-lg-6 mb-4">
    <div class="card">
      <div class="card-header"><%= t('widgets.headers.calls_by_time') %></div>
      <div class="card-body">
        <div id="calls_timegraph"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>
<div class="row">
  <div class="col-12 col-lg-6 mb-4">
    <div class="card">
      <div class="card-header"><%= t('widgets.headers.currencies_sent_received') %></div>
      <div class="card-body">
        <div id="transfers_by_currencies"><%= t('loading') %></div>
      </div>
    </div>
  </div>
  <div class="col-12 col-lg-6 mb-4">
    <div class="card">
      <div class="card-header"><%= t('widgets.headers.calls_smart_contracts') %></div>
      <div class="card-body">
        <div id="calls_smart_contracts"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>

<script>
    widgets.callbacks({
        token_path: function(name, address, locale){
            return (locale == 'en' || '/'+locale) +'/<%= params['network']['path'] %>/address/'+address;
        },
        transfer_to_path: function(currency_id, address, locale){
            return (locale == 'en' || '/'+locale) +'/<%= params['network']['path'] %>'+'/txs/transfers_to/'+address;
        },
        transfer_from_path: function(currency_id, address, locale){
            return (locale == 'en' || '/'+locale) +'/<%= params['network']['path'] %>/txs/transfers_from/'+address;
        },
        smart_contract_method_path: function(name, address, locale){
            return (locale == 'en' || '/'+locale) +'/<%= params['network']['path'] %>'+'/functions/'+address;
        },
        smart_contract_path: function(name, address, locale){
            return (locale == 'en' || '/'+locale) +'/<%= params['network']['path'] %>'+'/smartcontract/'+address;
        },
        call_count_path: function(address, locale){
            return (locale == 'en' || '/'+locale) +'/<%= params['network']['path'] %>'+'/address/'+address;
        }
    });

    var tbt = new widgets.transfers_by_time('#transfers_timegraph', query1, 'ethereum.transfers');
    var cbt = new widgets.calls_by_time('#calls_timegraph', query2, 'ethereum.smartContractCalls');
    var tbc = new widgets.transfers_by_currencies('#transfers_by_currencies', query3, 'ethereum.transfers');
    var csc = new widgets.calls_smart_contracts('#calls_smart_contracts', query4, 'ethereum.smartContractCalls');
    query1.request({network: '<%= params['network']['network'] %>', currency: '<%= params['network']['currency'] %>', address: '<%= @address %>', from: <%= @from.html_safe %>, till: <%= @till.html_safe %>});
    query2.request({network: '<%= params['network']['network'] %>', address: '<%= @address %>', from: <%= @from.html_safe %>, till: <%= @till.html_safe %>});
    query3.request({network: '<%= params['network']['network'] %>', address: '<%= @address %>', from: <%= @from.html_safe %>, till: <%= @till.html_safe %>, limit: 10});
    query4.request({network: '<%= params['network']['network'] %>', address: '<%= @address %>', from: <%= @from.html_safe %>, till: <%= @till.html_safe %>, limit: 10});

    rr.change(function(start, end, clear){
        query1.request({from: start, till: end});
        query2.request({from: start, till: end});
        query3.request({from: start, till: end, limit: 10});
        query4.request({from: start, till: end, limit: 10});
    })
</script>