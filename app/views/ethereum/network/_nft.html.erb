<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div class="card">
      <div class="card-header alert-warning"><%= t('widgets.headers.miners') %></div>
      <div class="card-body">
   <div class="alert alert-primary" role="alert">
  This is a primary alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div class="alert alert-secondary" role="alert">
  This is a secondary alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div class="alert alert-success" role="alert">
  This is a success alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div class="alert alert-danger" role="alert">
  This is a danger alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div class="alert alert-warning" role="alert">
  This is a warning alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div class="alert alert-info" role="alert">
  This is a info alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div id='testDiv' class="alert alert-light" role="alert">
  This is a light alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
<div class="alert alert-dark" role="alert">
  This is a dark alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
        <div id="miners"><%= t('loading') %></div>
        <div id="component_id"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>

<script>
class TableComponent {

    #element
    #queryMetaInfo

   constructor(element, queryMetaInfo) {
       this.#element = element;
       this.#queryMetaInfo = queryMetaInfo;
   }

   onData(data){
       console.log(this.#queryMetaInfo.name);
       console.log(data);
   }

}


const GRAPHQL_API = "https://graphql.bitquery.io/api";

const graphqlQueryExecutor = (url, query, variables, api_key) => {
    console.log(url, query, variables, api_key)
    let keyHeader = { 'X-API-KEY': api_key }
    return fetch(
      url,
      {
          method: 'POST',
          headers: {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              ...keyHeader
          },
          body: JSON.stringify({query: query, variables: variables}),
          credentials: 'same-origin',
      },
    )
}

function renderComponent (queryId, selector, component, api_key, variables){
    console.log(GRAPHQL_API + "/getquery/" + queryId)
    fetch(GRAPHQL_API + "/getquery/" + queryId)
        .then( (response) => response.json() )
        .then( (queryMetaData) => {
            const componentObject = new component($(selector), queryMetaData)
            graphqlQueryExecutor(queryMetaData.endpoint_url, queryMetaData.query, queryMetaData.variables, api_key)
              .then( (response) => response.json() )
              .then( (graphQLResponse) => componentObject(graphQLResponse))
        });
}
renderComponent("QueryForBlocks","#component_id",TableComponent);
</script>