<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div class="card">
      <div class="card-header"><%= t('widgets.headers.graph') %></div>
      <div class="card-body">
        <div id="graph"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>

<script>

    $( document ).ready(function() {


        var query = new widgets.query(`
                        query ($network: EthereumNetwork!,
                                $address: String!,
                                $limit: Int!,
                                $from: ISO8601DateTime,
                                $till: ISO8601DateTime){
                        ethereum(network: $network){

                          inbound: transfers(options:{desc: "amount", limit: $limit},
                            date: {since: $from till: $till },

                            currency:{is:"ETH"}
                            receiver:{is: $address}

                          ) {

                            sender {
                              address
                              annotation
                            }
                            receiver {
                              address
                              annotation
                            }

                            amount
                            transfers: count
                            txs: count(uniq: txs)

                          }


                          outbound: transfers(options:{desc: "amount", limit: $limit},
                            date: {since: $from till: $till },

                            currency:{is:"ETH"}
                            sender:{is: $address}

                          ) {

                            sender {
                              address
                              annotation
                            }
                            receiver {
                              address
                              annotation
                            }

                            amount
                            transfers: count
                            txs: count(uniq: txs)
                          }


                        }
                      }`);

        new widgets.template('#graph', query, '', {
            title: '<%= t('widgets.headers.graph') %>',
            callback: function(domNode, data){
                let _ = widgets.lodash;
              console.log(domNode);
                console.log(data);
                domNode.innerText = 'FUCk';

                this.prepareNodes = function(nodes){
                    let prepareNode = function(node){
                        if (node.address == '0x0000000000000000000000000000000000000000'){
                            return {
                                id: node.address,
                                label: 'System',
                                group: 'system',
                                title: node.address,
                                link: ''
                            };
                        } else {
                            return {
                                id: node.address,
                                label: _.truncate(node.address, {lenght: 15, separator: '...'}),
                                group: 'address',
                                title: node.address,
                                link: ''
                            };
                        }
                    };

                    let prepared = [];
                    _.each(nodes, function(node){
                            prepared.push(prepareNode(node.receiver));
                            prepared.push(prepareNode(node.sender));
                    });
                    return prepared;
                };

                this.prepareEdges = function(edges, receiver = true, address = '<%= @address %>'){
                    let g = this;
                    let prepareEdge = function(edge){
                        let currency_name = 'ETH';//edge.currency.symbol;
                        let width_counts = Math.log(edge.transfers)+1;
                        let width = (edge.amount > 1) ? 1.5*Math.log10(edge.amount)+1 : 1;
                        let value = edge.amount;//parseFloat(edge.amount)<=1e-6 ? edge.amount : numeral(edge.amount).format('0.0000a');

                        let label = value + ' ' + currency_name;

                        if(receiver){
                            return {
                                from: edge.sender.address,
                                to: address,
                                arrows: 'to',
                                label: label,
                                color: {color: 'grey', highlight: '#ff5722'},
                                font: {align: 'middle', multi: true},
                                smooth: true,
                                width: width,
                                select_type: 'select_transfers',
                                hidden: false,
                                id: g.hashCode(['select_transfers', edge.sender.address, address, label])
                            }
                        } else {
                            return {
                                from: address,
                                to: edge.receiver.address,
                                arrows: 'to',
                                label: label,
                                color: {color: 'black', highlight: '#ff5722'},
                                font: {align: 'middle', multi: true},
                                smooth: true,
                                width: width,
                                select_type: 'select_transfers',
                                hidden: false,
                                id: g.hashCode(['select_transfers', address, edge.receiver.address, label])
                            }
                        }
                    };
                    let prepared = [];
                    _.each(edges, function(edge){
                        prepared.push(prepareEdge(edge));
                    });
                    return prepared;
                };

                this.hashCode = function(data){
                    var string = JSON.stringify(data);
                    console.log(string);
                    if (Array.prototype.reduce){
                        console.log(string.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0));
                        return string.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);
                    }
                    var hash = 0;
                    if (string.length === 0) return hash;
                    for (var i = 0; i < string.length; i++) {
                        var character  = string.charCodeAt(i);
                        hash  = ((hash<<5)-hash)+character;
                        hash = hash & hash; // Convert to 32bit integer
                    }
                    return hash;
                };

                this.dataset = {
                    nodes: new vis.DataSet(_.uniqBy(this.prepareNodes(data.ethereum.inbound).concat(this.prepareNodes(data.ethereum.outbound)), 'id')),
                    edges: new vis.DataSet(this.prepareEdges(data.ethereum.inbound).concat(this.prepareEdges(data.ethereum.outbound, false)))
                };

                console.log(this.dataset);

                this.options = {
                    height: '400px',
                    physics: {
                        stabilization: {
                            enabled: false,
                            iterations: 10,
                            onlyDynamicEdges: true
                        },
                        barnesHut: {
                            damping: 0.4,
                            avoidOverlap: 0.1,
                            springConstant: 0.09
                        }
                    },
                    groups: {
                        smart_contract: {
                            shape: 'icon',
                            icon: {
                                face: 'Glyphicons Halflings',
                                code: '\ue019',
                                size: 50,
                                color: '#f0a30a'
                            }
                        },
                        multisig: {
                            shape: 'icon',
                            icon: {
                                face: 'Glyphicons Halflings',
                                code: '\ue225',
                                size: 90,
                                color: '#03a9f4'
                            }
                        },
                        address: {
                            shape: 'icon',
                            icon: {
                                face: 'Font Awesome 5 Free',
                                code: '\uf007',
                                weight: 400,
                                size: 30,
                                color: '#009688'
                            }
                        },
                        annotated_address: {
                            shape: 'icon',
                            icon: {
                                face: 'Glyphicons Halflings',
                                code: '\ue008',
                                size: 30,
                                color: '#006650',
                            },
                            font: {
                                background: '#006650',
                                color: 'white'
                            }
                        },
                        token: {
                            shape: 'icon',
                            icon: {
                                face: 'Glyphicons Halflings',
                                code: '\ue201',
                                size: 70,
                                color: '#ff5722'
                            }
                        },
                        dex: {
                            shape: 'icon',
                            icon: {
                                face: 'Glyphicons Halflings',
                                code: '\ue031',
                                size: 70,
                                color: '#03a9f4'
                            }
                        },
                        MarginPositionToken: {
                            shape: 'icon',
                            icon: {
                                face: 'Glyphicons Halflings',
                                code: '\ue245',
                                size: 70,
                                color: '#ff5722'
                            }
                        },
                        system: {
                            shape: 'icon',
                            icon: {
                                face: 'Glyphicons Halflings',
                                code: '\ue135',
                                size: 40,
                                color: '#009688'
                            }
                        }
                    }
                };

                this.draw = function(){
                    let g = this;
                    let network = new vis.Network(domNode, this.dataset, this.options);

                    network.on('dragEnd', function (t) {
                        _.each(t.nodes, function(node, i){
                            g.dataset.nodes.update({id: node, physics: false});
                        });
                    });

                    network.on('doubleClick', function(target){
                        if(target.nodes.length>0){
                            var node_id = target.nodes[0];
                            if(g.dataset.nodes.get(node_id).group!='system'){
                                g.expand(node_id);
                            }

                        }
                    });

                };

                this.expand = function(address){
                    let g = this;
                    g.dataset.nodes.update({id: address, physics: false});
                    // query.request({
                    //    network: '<%#= params['network']['network'] %>',
                        // address: address
                    // }, undefined, false);
                    query.request({
                        network: '<%= params['network']['network'] %>',
                        address: address
                    }, function(result){
                      _.each(_.uniqBy(g.prepareNodes(result.ethereum.inbound).concat(g.prepareNodes(result.ethereum.outbound)), 'id'), function(node){
                          if(!g.dataset.nodes.get(node.id)){
                              g.dataset.nodes.add(node);
                          }
                      });

                      // _.each(g.prepareEdges(result.ethereum.inbound, true, address).concat(g.prepareEdges(result.ethereum.outbound, false, address)), function(edge){
                      //     g.dataset.edges.add(edge);
                      // });

                      _.each(g.prepareEdges(result.ethereum.inbound, true, address).concat(g.prepareEdges(result.ethereum.outbound, false, address)), function(edge){
                          if(!g.dataset.edges.get(edge.id)){
                              g.dataset.edges.add(edge);
                          }
                      });

                    });
                };

                this.draw();
            }
        });

        queryWithTimeRange(rr, query, <%= @from.html_safe %>,<%= @till.html_safe %>,{
            network: '<%= params['network']['network'] %>',
            address: '<%= @address %>'
        });
//        query.request({
  //          network: '<%#= params['network']['network'] %>',
    //        address: '<%#= @address %>'
      //  }, undefined, fal)se
    });

</script>