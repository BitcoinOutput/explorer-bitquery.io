<div class="row">
  <div class="col-12 col-lg-12 mb-4">
    <div class="card">
      <div class="card-header alert-warning"><%= t('widgets.headers.miners') %></div>
      <div class="card-body">

 
<div id='testDiv' class="alert alert-light" role="alert">
  This is a light alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
   <div id="table_div"></div>
</div>
<div class="alert alert-dark" role="alert">
  This is a dark alert with <a href="#" class="alert-link">an example link</a>. Give it a click if you like.
</div>
        <div id="miners"><%= t('loading') %></div>
        <div id="component_id"><%= t('loading') %></div>
      </div>
    </div>
  </div>
</div>

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript"></script>

<script >



class TableComponent {
   constructor(element, queryMetaInfo) {
    this.table = new google.visualization.Table(element);
    this.data = new google.visualization.DataTable();
    this.options = {
          allowHtml:true,
          showRowNumber: false,
          width: '100%',
          height: '100%',
        }
    this.config = this.configuration();
    this.config.columns.forEach(column => this.data.addColumn(column.type ? column.type :'string', column.name));
    this.table.draw(this.data, this.options);
   }

    onData = (data) => {
      console.log(data);
      let array = this.config.topElement(data)
      let rows = []
      array.forEach(rowData => {
        let row = []
        this.config.columns.forEach(column => row.push(column.cell(rowData)))
        rows.push(row)
      })
      this.data.addRows(rows)
      this.table.draw(this.data, this.options);
  };
}

const GRAPHQL_API = "http://localhost:3000/proxy_graphql_ide";

const graphqlQuerySubscriptionExecutor = async (url, query,componentObject,variables) =>{
   const client = createClient({
      url: 'wss://streaming.bitquery.io/graphql'
        });
      const payload = {query: query}
      let result;
        client.subscribe(payload, {
            next: async (data) => {
                result = data
                componentObject.onData(result.data);
                },
            complete: () => resolve(result)
        })
}

const graphqlQueryExecutor = async (url, query, variables, api_key = '') => {
  let keyHeader = { 'X-API-KEY': api_key };
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          ...keyHeader,
        },
        body: JSON.stringify({ query: query, variables: variables }),
        credentials: 'same-origin',
      });
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('graphqlQueryExecutor error:', error);
    }
  };

function renderComponent(queryId,selector,component,api_key,variables) {
  try {
    fetch(`${GRAPHQL_API}/getquery/${queryId}`)
      .then((response) => response.json())
      .then((queryMetaData) => {
        const componentObject = new component(document.querySelector(selector), queryMetaData);
          if (queryMetaData.query.trim().startsWith('subscription')) {
            graphqlQuerySubscriptionExecutor(queryMetaData.endpoint_url,queryMetaData.query,componentObject, queryMetaData.variables)
          } else {
            graphqlQueryExecutor(queryMetaData.endpoint_url,queryMetaData.query, queryMetaData.variables,api_key)
              .then((graphQLResponse) => {
                componentObject.onData(graphQLResponse.data);
              })
              .catch((error) => console.log("graphqlQueryExecutor error:", error));
          }
          })
        .catch((error) => console.log("fetch error:", error));
  } catch (error) {
    console.log("renderComponent error:", error);
  }
}

/////// on page

class NFTStartTable extends TableComponent {
     configuration() {
      return  {
          topElement: function (response){ return response.EVM.Transfers },
          columns: [
            {
              name: 'Time', cell: function(row){ return row.Block.Time },
            },
            {
              name: 'ID', cell: function(row){ return row.Transfer.Id },
            },
            { 
              name: 'Currency', cell: function(row){ return row.Transfer.Currency.Symbol }
            },
          ]
        }
     }
}

google.charts.load('current', {'packages':['table']});
google.charts.setOnLoadCallback(
  function draw(){
    renderComponent("Sub-Laset-Eth-NFT-tansfers","#component_id",NFTStartTable );
  }
);

</script>
 